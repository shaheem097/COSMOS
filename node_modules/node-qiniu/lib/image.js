var request    = require('request');
var _          = require('underscore');
var fs         = require('fs');
var path       = require('path');
var Promise    = require('bluebird');
var stream     = require('stream');
var util       = require('util');
var url        = require('url');
var Asset      = require('./asset');
var utils      = require('./utils');

/**
 * Image Asset
 * @param {String} key    key
 * @param {Bucket} parent bucket object
 */
function Image(key, parent, _config) {
  Image.super_.apply(this, arguments);

  var config = _.extend(_.clone(parent.config), {
    separate: '-'
  }, _config);

  this.key = key;
  this.parent = parent;
  this.config = config;
}
util.inherits(Image, Asset);

/**
 * get the image's infomations
 * @param  {Function} callback Callback
 * @return {Promise}           promise object
 */
Image.prototype.imageInfo = function(callback) {
  var self = this
  return new Promise(function(resolve, reject) {
    callback = callback || noop;

    var getToken = self.token({
      fop: 'imageInfo'
    });

    var _url = getToken.url + '&token=' + getToken.token;

    request(_url, function(err, res, body) {
      if (err) {
        reject(err);
        return callback(err);
      }

      var info = JSON.parse(body);

      resolve(info);
      callback(null, info);
    });
  })
};

/**
 * get the exif infomation of the picture
 * @param  {Function} callback Callback
 * @return {Promise}           promise object
 */
Image.prototype.exif = function(callback) {
  var self = this
  return new Promise(function(resolve, reject) {
    callback = callback || noop;

    var getToken = self.token({
      fop: 'exif'
    });

    var _url = getToken.url + '&token=' + getToken.token;

    request(_url, function(err, res, body) {
      if (err) {
        reject(err);
        return callback(err);
      }

      var info = JSON.parse(body);

      resolve(info);
      callback(null, info);
    });
  })
};

var imageViewTranslations = {
  weight: 'w',
  height: 'h',
  quality: 'q'
};

/**
 * return a thumbnail image
 * @param  {Object}   opts     options
 * @param  {Function} callback Callback
 * @return {Promise}           promise object
 */
Image.prototype.imageView = function(opts, callback) {
  var self = this
  var recive = null
  var promise = new Promise(function(resolve, reject) {
    callback = callback || noop;

    var mode = opts.mode;
    delete opts.mode;

    var params = {};

    _.each(opts, function(value, key) {
      if (imageViewTranslations.hasOwnProperty(key)) {
        key = imageViewTranslations[key];
      }

      params[key] = value;
    });

    var fop = util.format('imageView/%d%s', mode, genOptUrl(params));

    var getToken = self.token({
      fop: fop
    });

    var _url = getToken.url + '&token=' + getToken.token;

    recive = request(_url, function(err, resp, body) {
      if (err) {
        reject(err);
        return callback(err);
      }

      resolve(body);
      callback(null, body);
    });
  })

  /**
   * return the image stream
   * @return {Stream} stream
   */
  promise.stream = function() {
    return recive;
  };

  return promise;
};

/**
 * return a processed image
 * @param  {Object}   opts     options
 * @param  {Function} callback Callback
 * @return {Promise}           promise object
 */
Image.prototype.imageMogr = function(opts, callback) {
  var self = this
  var recive = null
  var promise = new Promise(function(resolve, reject) {
    callback = callback || noop;

    var params = {};

    _.extend(params, opts);
    
    var fop = util.format('imageMogr/v2/auto-orient%s', genOptUrl(params));

    var getToken = self.token({
      fop: fop
    });

    var _url = getToken.url + '&token=' + getToken.token;

    recive = request(_url, function(err, resp, body) {
      if (err) {
        reject(err);
        return callback(err);
      }

      resolve(body);
      callback(null, body);
    });
  })

  /**
   * return the image stream
   * @return {Stream} stream
   */
  promise.stream = function() {
    return recive;
  };

  return promise;
};

/**
 * return a image with a watermark
 * @param  {Object}   opts     options
 * @param  {Function} callback Callback
 * @return {Promise}           promise object
 */
Image.prototype.watermark = function(opts, callback) {
  var self = this
  var recive = null
  var promise = new Promise(function(resolve, reject) {
    callback = callback || noop;

    var params = {};
    var mode = opts.mode;
    delete opts.mode;

    _.extend(params, opts);

    params.image = utils.safeEncode(params.image);

    var fop = util.format('watermark/%d%s', mode, genOptUrl(params));

    var getToken = self.token({
      fop: fop
    });

    var _url = getToken.url + '&token=' + getToken.token;

    recive = request(_url, function(err, resp, body) {
      if (err) {
        reject(err);
        return callback(err);
      }

      resolve(body);
      callback(null, body);
    });
  })

  /**
   * return the image stream
   * @return {Stream} stream
   */
  promise.stream = function() {
    return recive;
  };
  return promise;
};

module.exports = Image;

function genOptUrl(params) {
  var _url = "";

  _.each(params, function(value, key) {
    _url += util.format('/%s/%s', key, value);
  });

  return _url;
}

function noop() {
  return false;
}